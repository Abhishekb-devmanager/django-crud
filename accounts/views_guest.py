from django.contrib.sites.shortcuts import get_current_site
from rest_framework.views import APIView
from rest_framework.response import Response
import math, random, copy
from api.utility.customexceptions import ServiceUnavailable, BadRequest, NotFound
from .models import GuestEmail
from .serializer_guest import GuestEmailSerializer


# Creating this view to save email if entered at the first step
class GuestUserView(APIView):
    """In case phone number and email are given together
    OTP will be sent to both email and phone numbers
    Both records get recorded in the guset user table
    however OTP only get validated for the email
    so if an phone no comes in it will be validated against 
    +9198@example.com autogeneted email which may not exist 
    thus user OTP verification will be false, if user provide email id
    then it will used as it identity, phone no becomes identity 
    only when it is used singly not with an email"""

    def post(self,request):
        #Returns 201 Resource created with created objects as a list."""
        req = request.data.copy()
        changed_request_data = self.prepare_data(req)

        code =self.generateOTP()
        changed_request_data['code'] = code

        serializer = GuestEmailSerializer(data=changed_request_data, many=False)
        if serializer.is_valid(raise_exception=True):
            user_saved = serializer.save()
        return Response({
            "success": "A 4-digit OTP has been share with you on {}. Please enter it below to verify your email".format(user_saved.email)
            }, 
            status=201
            )

    def generateOTP(self): 
        # Declare a digits variable   
        # which stores all digits  
        digits = "0123456789"
        OTP = "" 
    
        # length of password can be chaged 
        # by changing value in range 
        for i in range(4) : 
            OTP += digits[math.floor(random.random() * 10)] 
    
        return OTP 

    def prepare_data(self, req):
        """Replaces '',whitespaces, or missing keys into None, 
        changed phone_no into nested serializer representation, 
        validated primary identities"""
        prepared_data = req
        try:
            is_many = isinstance(req, list)
            if is_many:
                raise TypeError('Multi user entry is prohibited')
            
            #strip spaces
            recvd_email = req.get('email','').strip()
            recvd_phone = req.get('phone_no','').strip()

            #replace blank strings with None explicitly
            recvd_email = None if recvd_email in (None, '', ' ') else recvd_email
            recvd_phone = None if recvd_phone in (None, '', ' ') else recvd_phone

            if recvd_email is None and recvd_phone is None:
                raise KeyError('An email or a phone number is required to onboard.')
            
            if recvd_email is None and recvd_phone is not None:
                prepared_data = self.prepare_request_data_with_missing_email(req)

            return prepared_data

        except(KeyError, TypeError) as err:
            raise BadRequest(detail=err) 

    def prepare_request_data_with_missing_email(self, req):
        current_site = get_current_site(req).domain
        if req.get('phone_no') is not None:
            incoming_phn_str = req.get('phone_no')

        autogenerated_email = "{}@{}".format(incoming_phn_str,current_site)   
        req['email'] = autogenerated_email
        return req